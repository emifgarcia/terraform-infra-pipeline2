name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main  # Aciona o workflow quando houver um push para a branch principal (ajuste se necessário)

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
          
    steps:
    # Checkout do repositório
    - name: Checkout code
      uses: actions/checkout@v2
    
    # Set up do Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.10.3'  # Versão do Terraform que você usa

    # Login na Azure com a autenticação via Service Principal
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Inicialização do Terraform com configurações de backend seguras
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER_NAME }}" \
          -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"
      working-directory: ./environments/develop  # Ajuste o diretório de acordo com a sua estrutura

    - name: Terraform Refresh
      run: terraform refresh
      working-directory: ./environments/develop
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # Validar a configuração do Terraform
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./environments/develop  # Ajuste o diretório de acordo com a sua estrutura
    
    # Realizar o Terraform Plan
    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan
      working-directory: ./environments/develop
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # Aplica as mudanças no Terraform se o Terraform Plan não tiver falhado
    - name: Terraform Apply
      if: success() && github.ref == 'refs/heads/main'  # Garante que o apply só será feito no branch main
      run: terraform apply -auto-approve tfplan
      working-directory: ./environments/develop
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}


    # Optional: Salvar o estado no Azure Storage ou outro backend
    - name: Upload Terraform state to Azure (Optional)
      run: |
        az storage blob upload \
          --account-name ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }} \
          --container-name ${{ secrets.TF_BACKEND_CONTAINER_NAME }} \
          --file terraform.tfstate \
          --name terraform.tfstate \
          --overwrite
      working-directory: ./environments/develop
    
    # Limpar variáveis de ambiente sensíveis
    - name: Cleanup
      run: |
        unset AZURE_CLIENT_ID
        unset AZURE_CLIENT_SECRET
        unset AZURE_SUBSCRIPTION_ID
        unset AZURE_TENANT_ID
        unset TF_BACKEND_RESOURCE_GROUP_NAME
        unset TF_BACKEND_STORAGE_ACCOUNT_NAME
        unset TF_BACKEND_CONTAINER_NAME
        unset TF_BACKEND_KEY
